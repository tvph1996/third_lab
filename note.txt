python -m grpc_tools.protoc --proto_path=. --python_out=./grpc-service --python_out=./rest-service --grpc_python_out=./grpc-service --grpc_python_out=./rest-service ./myitems.proto


proto file is simplified


request should be in correct format, no checking implemented


circuit breaker: using ''docker stop'', 
    the single channel inside rest-service will lose its connection after grpc-service stop because
    gRPC channel have different internal logic to maintain its connection that we cant controll

this can be fixed by
    1. creating new gRPC Channel for each call. this still works because CircuitBreaker from pybreaker is
    a separate object running parallel and is mapped with gRPC Stub call, it does not care what
    gRPC Channel that the Stub is for.  
    2. use ''docker pause'' instead, but this is not useful in real life scenario.
    3. to avoid the overhead of creating gRPC Channels, the only solution is to have multiple grpc-service
       and create the logic to monitor and switch to channels from alive service 


grpc-service needs logic to handle lost connection to mongodb (exception handling) otherwise program will crash

default mongodb container save its data to an internal folder inside the container /data/db
if we docker stop/start the data is not lost. however, if docker down/up which is real life scenario when docker engine is down, the data is lost.
the solution is to using docker volume to store the data locally on docker host pc

docker compose up --build --force-recreate -d
